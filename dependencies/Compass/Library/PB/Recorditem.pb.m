// Code generated by protoc-gen-myrpc
// This is small json generator, json key will be p1, p2...
// default value of String is "" instead of null, default value of all number is 0, default value of Object and Array is nil
// all field with default value will be missing in generated json
// has_XXX is not supported in this Object, which is different with Protobuf
// Do not support Nested Message at this version
// DO NOT EDIT THIS FILE!
#import <Foundation/Foundation.h>
#import "Recorditem.pb.h"
#pragma mark - ENUM COMPErrorCode
BOOL COMPErrorCodeEnum_IsValidValue(int32_t value__) {
    switch (value__) {
        case COMPUndefinedError:
        case COMPOK:
        case COMPErrorParamInvalid:
        case COMPErrorServerInternalException:
	    return YES;
        default:
	    return NO;
    }
}

#pragma mark - ENUM COMPAppNameMappingAppId
BOOL COMPAppNameMappingAppIdEnum_IsValidValue(int32_t value__) {
    switch (value__) {
        case COMPUndefinedAppNameType:
        case COMPNewsClient:
        case COMPYouJuVideo:
        case COMPYouXiShortVideo:
        case COMPZixunClient:
        case COMPTvClient:
        case COMPQianfanClient:
        case COMPPCH5:
	    return YES;
        default:
	    return NO;
    }
}

#pragma mark - ENUM COMPSessionTypeEnum
BOOL COMPSessionTypeEnumEnum_IsValidValue(int32_t value__) {
    switch (value__) {
        case COMPUndefinedSessionType:
        case COMPOpenAppType:
        case COMPCloseAppType:
	    return YES;
        default:
	    return NO;
    }
}

#pragma mark - ENUM COMPAppOpenType
BOOL COMPAppOpenTypeEnum_IsValidValue(int32_t value__) {
    switch (value__) {
        case COMPUndefinedAppOpenType:
        case COMPPushStartType:
        case COMPAppStartType:
        case COMPThirdPartyAppStartType:
	    return YES;
        default:
	    return NO;
    }
}

#pragma mark - ENUM COMPAppPageJumpType
BOOL COMPAppPageJumpTypeEnum_IsValidValue(int32_t value__) {
    switch (value__) {
        case COMPUndefinedJumpType:
        case COMPInnerPageJumpType:
        case COMPBackstageJumpType:
        case COMPLockScreenJumpType:
        case COMPOtherAppJumpType:
	    return YES;
        default:
	    return NO;
    }
}

#pragma mark - ENUM COMPSocketErrorCode
BOOL COMPSocketErrorCodeEnum_IsValidValue(int32_t value__) {
    switch (value__) {
        case COMPUndefinedSocketType:
        case COMPUserCancelErrorType:
        case COMPDNSErrorType:
        case COMPSocketConnectErrorType:
        case COMPSocketSSLErrorType:
        case COMPRWStreamError:
	    return YES;
        default:
	    return NO;
    }
}



#pragma mark - COMPCommonResp
@implementation COMPCommonResp

- (instancetype)init
{
    self = [super init];
    if (self) {
        self.errorCode = 0;
        self.detail = @"";
        self.needRetry = NO;
    }
    return self;
}

- (NSMutableDictionary  *) toDict{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self.errorCode != 0) {
        dict[@"p1"] = @(self.errorCode);
    }
    if ([self.detail length] != 0) {
        dict[@"p2"] = self.detail;
    }
    if (self.needRetry) {
        dict[@"p3"] = @(self.needRetry);
    }
    return dict;
}

- (NSData *) data{
    NSData *jsonData= [NSJSONSerialization dataWithJSONObject:[self toDict] options:kNilOptions error:nil];
    return jsonData;
}

+ (COMPCommonResp *) parseFromData:(NSData *)data error:(NSError **)error{
    NSError *err = nil;
    NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&err];
    if (err != nil) {
        if (error != nil) {
            *error = err;
        }
        return nil;
    }
    if (dict == nil) {
        if (error != nil) {
            *error = [NSError errorWithDomain:@"MYRPC" code:-1  userInfo:nil];
        }
        return nil;
    }
    return [self parseFromDict:dict error:error];
}

+ (COMPCommonResp *) parseFromDict:(NSDictionary *)dict error:(NSError **)error{
    if (dict == nil || [dict count] == 0) {
    	return nil;
    }
    COMPCommonResp *result = [[COMPCommonResp alloc] init];
    if ([dict objectForKey:@"p1"] != nil) {
        result.errorCode = [(NSNumber *)[dict objectForKey:@"p1"] intValue];
    }
    if ([dict objectForKey:@"p2"] != nil) {
        result.detail = [dict objectForKey:@"p2"];
    }
    if ([dict objectForKey:@"p3"] != nil) {
        result.needRetry = [(NSNumber *)[dict objectForKey:@"p3"] boolValue];
    }

    return result;
}
@end

#pragma mark - COMPAppDeviceInfo
@implementation COMPAppDeviceInfo

- (instancetype)init
{
    self = [super init];
    if (self) {
        self.appName = @"";
        self.deviceType = @"";
        self.brand = @"";
        self.product = @"";
        self.sdkVersion = @"";
        self.appVersion = @"";
        self.imei = @"";
        self.channel = @"";
        self.mac = @"";
        self.rand = 0;
        self.md5 = @"";
        self.androidId = @"";
        self.tmSerial = @"";
        self.randUUID = @"";
        self.systemVersion = @"";
        self.tp = @"";
    }
    return self;
}

- (NSMutableDictionary  *) toDict{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if ([self.appName length] != 0) {
        dict[@"p1"] = self.appName;
    }
    if ([self.deviceType length] != 0) {
        dict[@"p2"] = self.deviceType;
    }
    if ([self.brand length] != 0) {
        dict[@"p3"] = self.brand;
    }
    if ([self.product length] != 0) {
        dict[@"p4"] = self.product;
    }
    if ([self.sdkVersion length] != 0) {
        dict[@"p5"] = self.sdkVersion;
    }
    if ([self.appVersion length] != 0) {
        dict[@"p6"] = self.appVersion;
    }
    if ([self.imei length] != 0) {
        dict[@"p7"] = self.imei;
    }
    if ([self.channel length] != 0) {
        dict[@"p8"] = self.channel;
    }
    if ([self.mac length] != 0) {
        dict[@"p9"] = self.mac;
    }
    if (self.rand != 0) {
        dict[@"p10"] = @(self.rand);
    }
    if ([self.md5 length] != 0) {
        dict[@"p11"] = self.md5;
    }
    if ([self.androidId length] != 0) {
        dict[@"p12"] = self.androidId;
    }
    if ([self.tmSerial length] != 0) {
        dict[@"p13"] = self.tmSerial;
    }
    if ([self.randUUID length] != 0) {
        dict[@"p14"] = self.randUUID;
    }
    if ([self.systemVersion length] != 0) {
        dict[@"p15"] = self.systemVersion;
    }
    if ([self.tp length] != 0) {
        dict[@"p16"] = self.tp;
    }
    return dict;
}

- (NSData *) data{
    NSData *jsonData= [NSJSONSerialization dataWithJSONObject:[self toDict] options:kNilOptions error:nil];
    return jsonData;
}

+ (COMPAppDeviceInfo *) parseFromData:(NSData *)data error:(NSError **)error{
    NSError *err = nil;
    NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&err];
    if (err != nil) {
        if (error != nil) {
            *error = err;
        }
        return nil;
    }
    if (dict == nil) {
        if (error != nil) {
            *error = [NSError errorWithDomain:@"MYRPC" code:-1  userInfo:nil];
        }
        return nil;
    }
    return [self parseFromDict:dict error:error];
}

+ (COMPAppDeviceInfo *) parseFromDict:(NSDictionary *)dict error:(NSError **)error{
    if (dict == nil || [dict count] == 0) {
    	return nil;
    }
    COMPAppDeviceInfo *result = [[COMPAppDeviceInfo alloc] init];
    if ([dict objectForKey:@"p1"] != nil) {
        result.appName = [dict objectForKey:@"p1"];
    }
    if ([dict objectForKey:@"p2"] != nil) {
        result.deviceType = [dict objectForKey:@"p2"];
    }
    if ([dict objectForKey:@"p3"] != nil) {
        result.brand = [dict objectForKey:@"p3"];
    }
    if ([dict objectForKey:@"p4"] != nil) {
        result.product = [dict objectForKey:@"p4"];
    }
    if ([dict objectForKey:@"p5"] != nil) {
        result.sdkVersion = [dict objectForKey:@"p5"];
    }
    if ([dict objectForKey:@"p6"] != nil) {
        result.appVersion = [dict objectForKey:@"p6"];
    }
    if ([dict objectForKey:@"p7"] != nil) {
        result.imei = [dict objectForKey:@"p7"];
    }
    if ([dict objectForKey:@"p8"] != nil) {
        result.channel = [dict objectForKey:@"p8"];
    }
    if ([dict objectForKey:@"p9"] != nil) {
        result.mac = [dict objectForKey:@"p9"];
    }
    if ([dict objectForKey:@"p10"] != nil) {
        result.rand = [(NSNumber *)[dict objectForKey:@"p10"] intValue];
    }
    if ([dict objectForKey:@"p11"] != nil) {
        result.md5 = [dict objectForKey:@"p11"];
    }
    if ([dict objectForKey:@"p12"] != nil) {
        result.androidId = [dict objectForKey:@"p12"];
    }
    if ([dict objectForKey:@"p13"] != nil) {
        result.tmSerial = [dict objectForKey:@"p13"];
    }
    if ([dict objectForKey:@"p14"] != nil) {
        result.randUUID = [dict objectForKey:@"p14"];
    }
    if ([dict objectForKey:@"p15"] != nil) {
        result.systemVersion = [dict objectForKey:@"p15"];
    }
    if ([dict objectForKey:@"p16"] != nil) {
        result.tp = [dict objectForKey:@"p16"];
    }

    return result;
}
@end

#pragma mark - COMPAppSessionInfo
@implementation COMPAppSessionInfo

- (instancetype)init
{
    self = [super init];
    if (self) {
        self.sessionType = 0;
        self.duration = 0;
        self.md5 = @"";
        self.appOpenType = 0;
        self.thirdPartyAppName = @"";
    }
    return self;
}

- (NSMutableDictionary  *) toDict{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self.sessionType != 0) {
        dict[@"p1"] = @(self.sessionType);
    }
    if (self.duration != 0) {
        dict[@"p2"] = @(self.duration);
    }
    if ([self.md5 length] != 0) {
        dict[@"p3"] = self.md5;
    }
    if (self.appOpenType != 0) {
        dict[@"p4"] = @(self.appOpenType);
    }
    if ([self.thirdPartyAppName length] != 0) {
        dict[@"p5"] = self.thirdPartyAppName;
    }
    return dict;
}

- (NSData *) data{
    NSData *jsonData= [NSJSONSerialization dataWithJSONObject:[self toDict] options:kNilOptions error:nil];
    return jsonData;
}

+ (COMPAppSessionInfo *) parseFromData:(NSData *)data error:(NSError **)error{
    NSError *err = nil;
    NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&err];
    if (err != nil) {
        if (error != nil) {
            *error = err;
        }
        return nil;
    }
    if (dict == nil) {
        if (error != nil) {
            *error = [NSError errorWithDomain:@"MYRPC" code:-1  userInfo:nil];
        }
        return nil;
    }
    return [self parseFromDict:dict error:error];
}

+ (COMPAppSessionInfo *) parseFromDict:(NSDictionary *)dict error:(NSError **)error{
    if (dict == nil || [dict count] == 0) {
    	return nil;
    }
    COMPAppSessionInfo *result = [[COMPAppSessionInfo alloc] init];
    if ([dict objectForKey:@"p1"] != nil) {
        result.sessionType = [(NSNumber *)[dict objectForKey:@"p1"] intValue];
    }
    if ([dict objectForKey:@"p2"] != nil) {
        result.duration = [(NSNumber *)[dict objectForKey:@"p2"] longValue];
    }
    if ([dict objectForKey:@"p3"] != nil) {
        result.md5 = [dict objectForKey:@"p3"];
    }
    if ([dict objectForKey:@"p4"] != nil) {
        result.appOpenType = [(NSNumber *)[dict objectForKey:@"p4"] intValue];
    }
    if ([dict objectForKey:@"p5"] != nil) {
        result.thirdPartyAppName = [dict objectForKey:@"p5"];
    }

    return result;
}
@end

#pragma mark - COMPAppPageInfo
@implementation COMPAppPageInfo

- (instancetype)init
{
    self = [super init];
    if (self) {
        self.parentPage = @"";
        self.currentPage = @"";
        self.toPage = @"";
        self.duration = 0;
        self.startTime = 0;
        self.endTime = 0;
        self.md5 = @"";
        self.appPageJumpType = 0;
    }
    return self;
}

- (NSMutableDictionary  *) toDict{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if ([self.parentPage length] != 0) {
        dict[@"p1"] = self.parentPage;
    }
    if ([self.currentPage length] != 0) {
        dict[@"p2"] = self.currentPage;
    }
    if ([self.toPage length] != 0) {
        dict[@"p3"] = self.toPage;
    }
    if (self.duration != 0) {
        dict[@"p4"] = @(self.duration);
    }
    if (self.startTime != 0) {
        dict[@"p5"] = @(self.startTime);
    }
    if (self.endTime != 0) {
        dict[@"p6"] = @(self.endTime);
    }
    if ([self.md5 length] != 0) {
        dict[@"p7"] = self.md5;
    }
    if (self.appPageJumpType != 0) {
        dict[@"p8"] = @(self.appPageJumpType);
    }
    return dict;
}

- (NSData *) data{
    NSData *jsonData= [NSJSONSerialization dataWithJSONObject:[self toDict] options:kNilOptions error:nil];
    return jsonData;
}

+ (COMPAppPageInfo *) parseFromData:(NSData *)data error:(NSError **)error{
    NSError *err = nil;
    NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&err];
    if (err != nil) {
        if (error != nil) {
            *error = err;
        }
        return nil;
    }
    if (dict == nil) {
        if (error != nil) {
            *error = [NSError errorWithDomain:@"MYRPC" code:-1  userInfo:nil];
        }
        return nil;
    }
    return [self parseFromDict:dict error:error];
}

+ (COMPAppPageInfo *) parseFromDict:(NSDictionary *)dict error:(NSError **)error{
    if (dict == nil || [dict count] == 0) {
    	return nil;
    }
    COMPAppPageInfo *result = [[COMPAppPageInfo alloc] init];
    if ([dict objectForKey:@"p1"] != nil) {
        result.parentPage = [dict objectForKey:@"p1"];
    }
    if ([dict objectForKey:@"p2"] != nil) {
        result.currentPage = [dict objectForKey:@"p2"];
    }
    if ([dict objectForKey:@"p3"] != nil) {
        result.toPage = [dict objectForKey:@"p3"];
    }
    if ([dict objectForKey:@"p4"] != nil) {
        result.duration = [(NSNumber *)[dict objectForKey:@"p4"] longValue];
    }
    if ([dict objectForKey:@"p5"] != nil) {
        result.startTime = [(NSNumber *)[dict objectForKey:@"p5"] longValue];
    }
    if ([dict objectForKey:@"p6"] != nil) {
        result.endTime = [(NSNumber *)[dict objectForKey:@"p6"] longValue];
    }
    if ([dict objectForKey:@"p7"] != nil) {
        result.md5 = [dict objectForKey:@"p7"];
    }
    if ([dict objectForKey:@"p8"] != nil) {
        result.appPageJumpType = [(NSNumber *)[dict objectForKey:@"p8"] intValue];
    }

    return result;
}
@end

#pragma mark - COMPAppRequestInfo
@implementation COMPAppRequestInfo

- (instancetype)init
{
    self = [super init];
    if (self) {
        self.schema = @"";
        self.domain = @"";
        self.url = @"";
        self.method = @"";
        self.ts = 0;
        self.ttfb = 0;
        self.time = 0;
        self.reqSize = 0;
        self.resSize = 0;
        self.code = 0;
        self.clientIp = @"";
        self.serverIp = @"";
        self.md5 = @"";
        self.count = 0;
    }
    return self;
}

- (NSMutableDictionary  *) toDict{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if ([self.schema length] != 0) {
        dict[@"p1"] = self.schema;
    }
    if ([self.domain length] != 0) {
        dict[@"p2"] = self.domain;
    }
    if ([self.url length] != 0) {
        dict[@"p3"] = self.url;
    }
    if ([self.method length] != 0) {
        dict[@"p4"] = self.method;
    }
    if (self.ts != 0) {
        dict[@"p5"] = @(self.ts);
    }
    if (self.ttfb != 0) {
        dict[@"p6"] = @(self.ttfb);
    }
    if (self.time != 0) {
        dict[@"p7"] = @(self.time);
    }
    if (self.reqSize != 0) {
        dict[@"p8"] = @(self.reqSize);
    }
    if (self.resSize != 0) {
        dict[@"p9"] = @(self.resSize);
    }
    if (self.code != 0) {
        dict[@"p10"] = @(self.code);
    }
    if ([self.clientIp length] != 0) {
        dict[@"p11"] = self.clientIp;
    }
    if ([self.serverIp length] != 0) {
        dict[@"p12"] = self.serverIp;
    }
    if ([self.md5 length] != 0) {
        dict[@"p13"] = self.md5;
    }
    if (self.count != 0) {
        dict[@"p14"] = @(self.count);
    }
    return dict;
}

- (NSData *) data{
    NSData *jsonData= [NSJSONSerialization dataWithJSONObject:[self toDict] options:kNilOptions error:nil];
    return jsonData;
}

+ (COMPAppRequestInfo *) parseFromData:(NSData *)data error:(NSError **)error{
    NSError *err = nil;
    NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&err];
    if (err != nil) {
        if (error != nil) {
            *error = err;
        }
        return nil;
    }
    if (dict == nil) {
        if (error != nil) {
            *error = [NSError errorWithDomain:@"MYRPC" code:-1  userInfo:nil];
        }
        return nil;
    }
    return [self parseFromDict:dict error:error];
}

+ (COMPAppRequestInfo *) parseFromDict:(NSDictionary *)dict error:(NSError **)error{
    if (dict == nil || [dict count] == 0) {
    	return nil;
    }
    COMPAppRequestInfo *result = [[COMPAppRequestInfo alloc] init];
    if ([dict objectForKey:@"p1"] != nil) {
        result.schema = [dict objectForKey:@"p1"];
    }
    if ([dict objectForKey:@"p2"] != nil) {
        result.domain = [dict objectForKey:@"p2"];
    }
    if ([dict objectForKey:@"p3"] != nil) {
        result.url = [dict objectForKey:@"p3"];
    }
    if ([dict objectForKey:@"p4"] != nil) {
        result.method = [dict objectForKey:@"p4"];
    }
    if ([dict objectForKey:@"p5"] != nil) {
        result.ts = [(NSNumber *)[dict objectForKey:@"p5"] longValue];
    }
    if ([dict objectForKey:@"p6"] != nil) {
        result.ttfb = [(NSNumber *)[dict objectForKey:@"p6"] longValue];
    }
    if ([dict objectForKey:@"p7"] != nil) {
        result.time = [(NSNumber *)[dict objectForKey:@"p7"] longValue];
    }
    if ([dict objectForKey:@"p8"] != nil) {
        result.reqSize = [(NSNumber *)[dict objectForKey:@"p8"] longValue];
    }
    if ([dict objectForKey:@"p9"] != nil) {
        result.resSize = [(NSNumber *)[dict objectForKey:@"p9"] longValue];
    }
    if ([dict objectForKey:@"p10"] != nil) {
        result.code = [(NSNumber *)[dict objectForKey:@"p10"] intValue];
    }
    if ([dict objectForKey:@"p11"] != nil) {
        result.clientIp = [dict objectForKey:@"p11"];
    }
    if ([dict objectForKey:@"p12"] != nil) {
        result.serverIp = [dict objectForKey:@"p12"];
    }
    if ([dict objectForKey:@"p13"] != nil) {
        result.md5 = [dict objectForKey:@"p13"];
    }
    if ([dict objectForKey:@"p14"] != nil) {
        result.count = [(NSNumber *)[dict objectForKey:@"p14"] intValue];
    }

    return result;
}
@end

#pragma mark - COMPRecordItemElem
@implementation COMPRecordItemElem

- (instancetype)init
{
    self = [super init];
    if (self) {
        self.ts = 0;
        self.appDeviceInfo = nil;
        self.appSessionInfo = nil;
        self.appPageInfo = nil;
        self.appRequestInfo = nil;
    }
    return self;
}

- (NSMutableDictionary  *) toDict{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self.ts != 0) {
        dict[@"p1"] = @(self.ts);
    }
    if (self.appDeviceInfo != nil && [self.appDeviceInfo respondsToSelector:@selector(toDict)]) {
        dict[@"p2"] = [self.appDeviceInfo toDict];
    }
    if (self.appSessionInfo != nil && [self.appSessionInfo respondsToSelector:@selector(toDict)]) {
        dict[@"p3"] = [self.appSessionInfo toDict];
    }
    if (self.appPageInfo != nil && [self.appPageInfo respondsToSelector:@selector(toDict)]) {
        dict[@"p4"] = [self.appPageInfo toDict];
    }
    if (self.appRequestInfo != nil && [self.appRequestInfo respondsToSelector:@selector(toDict)]) {
        dict[@"p5"] = [self.appRequestInfo toDict];
    }
    return dict;
}

- (NSData *) data{
    NSData *jsonData= [NSJSONSerialization dataWithJSONObject:[self toDict] options:kNilOptions error:nil];
    return jsonData;
}

+ (COMPRecordItemElem *) parseFromData:(NSData *)data error:(NSError **)error{
    NSError *err = nil;
    NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&err];
    if (err != nil) {
        if (error != nil) {
            *error = err;
        }
        return nil;
    }
    if (dict == nil) {
        if (error != nil) {
            *error = [NSError errorWithDomain:@"MYRPC" code:-1  userInfo:nil];
        }
        return nil;
    }
    return [self parseFromDict:dict error:error];
}

+ (COMPRecordItemElem *) parseFromDict:(NSDictionary *)dict error:(NSError **)error{
    if (dict == nil || [dict count] == 0) {
    	return nil;
    }
    COMPRecordItemElem *result = [[COMPRecordItemElem alloc] init];
    if ([dict objectForKey:@"p1"] != nil) {
        result.ts = [(NSNumber *)[dict objectForKey:@"p1"] longValue];
    }
    if ([dict objectForKey:@"p2"] != nil) {
        NSError * err = nil;
        result.appDeviceInfo = [COMPAppDeviceInfo parseFromDict:[dict objectForKey:@"p2"] error:&err];
        if (err != nil) {
            if (error != nil) { *error = err;}
            return nil;
        }
    }
    if ([dict objectForKey:@"p3"] != nil) {
        NSError * err = nil;
        result.appSessionInfo = [COMPAppSessionInfo parseFromDict:[dict objectForKey:@"p3"] error:&err];
        if (err != nil) {
            if (error != nil) { *error = err;}
            return nil;
        }
    }
    if ([dict objectForKey:@"p4"] != nil) {
        NSError * err = nil;
        result.appPageInfo = [COMPAppPageInfo parseFromDict:[dict objectForKey:@"p4"] error:&err];
        if (err != nil) {
            if (error != nil) { *error = err;}
            return nil;
        }
    }
    if ([dict objectForKey:@"p5"] != nil) {
        NSError * err = nil;
        result.appRequestInfo = [COMPAppRequestInfo parseFromDict:[dict objectForKey:@"p5"] error:&err];
        if (err != nil) {
            if (error != nil) { *error = err;}
            return nil;
        }
    }

    return result;
}
@end

#pragma mark - COMPRecordItemListReq
@implementation COMPRecordItemListReq

- (instancetype)init
{
    self = [super init];
    if (self) {
        self.recordItemElem = nil;
    }
    return self;
}

- (NSMutableDictionary  *) toDict{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if ([self.recordItemElem count] != 0) {
        NSMutableArray *array = [NSMutableArray arrayWithCapacity:[self.recordItemElem count]];
        for (int i = 0; i < [self.recordItemElem count]; i++) {
            [array addObject:[self.recordItemElem[i] toDict]];
        }
        dict[@"p1"] = array;
    }
    return dict;
}

- (NSData *) data{
    NSData *jsonData= [NSJSONSerialization dataWithJSONObject:[self toDict] options:kNilOptions error:nil];
    return jsonData;
}

+ (COMPRecordItemListReq *) parseFromData:(NSData *)data error:(NSError **)error{
    NSError *err = nil;
    NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&err];
    if (err != nil) {
        if (error != nil) {
            *error = err;
        }
        return nil;
    }
    if (dict == nil) {
        if (error != nil) {
            *error = [NSError errorWithDomain:@"MYRPC" code:-1  userInfo:nil];
        }
        return nil;
    }
    return [self parseFromDict:dict error:error];
}

+ (COMPRecordItemListReq *) parseFromDict:(NSDictionary *)dict error:(NSError **)error{
    if (dict == nil || [dict count] == 0) {
    	return nil;
    }
    COMPRecordItemListReq *result = [[COMPRecordItemListReq alloc] init];
    if ([dict objectForKey:@"p1"] != nil ) {
	NSArray *fromArray = [dict objectForKey:@"p1"];
	NSMutableArray *array = [NSMutableArray arrayWithCapacity:[fromArray count]];
	NSError *err = nil;
        for (int i = 0; i < [fromArray count]; i++) {
            [array addObject:[COMPRecordItemElem parseFromDict:fromArray[i] error: &err]];
            if (err != nil) {
                if (error != nil) {*error = err;}
                return nil;
            }
        }
        result.recordItemElem = array;
    }

    return result;
}
@end

#pragma mark - COMPRecordItemListResp
@implementation COMPRecordItemListResp

- (instancetype)init
{
    self = [super init];
    if (self) {
        self.commonResp = nil;
    }
    return self;
}

- (NSMutableDictionary  *) toDict{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self.commonResp != nil && [self.commonResp respondsToSelector:@selector(toDict)]) {
        dict[@"p1"] = [self.commonResp toDict];
    }
    return dict;
}

- (NSData *) data{
    NSData *jsonData= [NSJSONSerialization dataWithJSONObject:[self toDict] options:kNilOptions error:nil];
    return jsonData;
}

+ (COMPRecordItemListResp *) parseFromData:(NSData *)data error:(NSError **)error{
    NSError *err = nil;
    NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&err];
    if (err != nil) {
        if (error != nil) {
            *error = err;
        }
        return nil;
    }
    if (dict == nil) {
        if (error != nil) {
            *error = [NSError errorWithDomain:@"MYRPC" code:-1  userInfo:nil];
        }
        return nil;
    }
    return [self parseFromDict:dict error:error];
}

+ (COMPRecordItemListResp *) parseFromDict:(NSDictionary *)dict error:(NSError **)error{
    if (dict == nil || [dict count] == 0) {
    	return nil;
    }
    COMPRecordItemListResp *result = [[COMPRecordItemListResp alloc] init];
    if ([dict objectForKey:@"p1"] != nil) {
        NSError * err = nil;
        result.commonResp = [COMPCommonResp parseFromDict:[dict objectForKey:@"p1"] error:&err];
        if (err != nil) {
            if (error != nil) { *error = err;}
            return nil;
        }
    }

    return result;
}
@end


